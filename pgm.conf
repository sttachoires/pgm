#! /bin/bash
# 
# Bash library for PostgreSQL.
#
# S. Tachoires		23/02/2016	Initial version
#
#set -xv

# INCLUDE
if [ "${PGM_CONF}" == "LOADED" ]; then
  return 0
fi

# PGM CONSTANTS
export PGM_BASE_DIR="/home/stephane/postgres"
export PGM_EXPORT_DIR="/home/stephane/pgdb/export"
export PGM_TMP_DIR="/var/tmp"
export PGM_INVENTORY_DIR="/home/stephane/postgres/inventory"
export PGM_LOG_DIR="${PGM_BASE_DIR}/log"
export PGM_USER="stephane"
export PGM_PGTAB="${PGM_INVENTORY_DIR}/pgtab"

# SERVER CONSTANT
# The starting point of every instance directory
export PGM_PGBASE_DIR="/home/stephane/postgres/pgdb"
export PGM_PGLOG_FILE="postgresql.log"
# List of allowed charater (form of a regular expression) alowed to form instances name
export PGM_PGSID_AUTHORIZED_CHARS="-a-zA-Z._#0-9"
# List of allowed charater (form of a regular expression) alowed to form databases name
export PGM_PGDATABASE_AUTHORIZED_CHARS="-a-zA-Z._#0-9"
export PGM_PGEXTENTIONS="adminpack, auto_explain, pg_stat_statements, postgres_fdw, sslinfo, btree_gin, btree_gist"
export PGM_PGEXTENTIONS_TO_CREATE="adminpack pg_stat_statements"

# After setServer
export PGM_FULL_VERSION=""
export PGM_FULL_VERSION_NUM=0
export PGM_MAJOR_VERSION=""
export PGM_MAJOR_VERSION_NUM=0

# SERVER PATTERN CONSTANT 
# Pattern PGMPATTERN_CONSTANT will be expanded into PGM_CONSTANT
# In those pattern you can use the previous PGM_ constants
PGMSRVPATTERN_PGHOME='${PGM_BASE_DIR}/server/${PGM_FULL_VERSION}'
PGMSRVPATTERN_TEMPLATE='/home/stephane/postgres/github/pgm/template/${PGM_MAJOR_VERSION}'


# After setInstance

# Pattern for different constants 
# Pattern PGMPGPATTERN_NAME will be expanded into PGM_NAME
#  ${PGM_FULL_VERSION} that contains full text version of a PostgreSQL server (9.5.0)
#  ${PGM_FULL_VERSION_NUM} that contains full numeric version (950)
#  ${PGM_MAJOR_VERSION} the major text version (9.5)
#  ${PGM_MAJOR_VERSION_NUM} the major numeric version (95)
#  ${PGM_PGSID} the instance name
PGMPGPATTERN_PGDATA='${PGM_PGBASE_DIR}/${PGM_MAJOR_VERSION}/${PGM_PGSID}/data'
PGMPGPATTERN_PGLOG='${PGM_PGBASE_DIR}/${PGM_MAJOR_VERSION}/${PGM_PGSID}/log'
PGMPGPATTERN_PGXLOG='${PGM_PGBASE_DIR}/${PGM_MAJOR_VERSION}/${PGM_PGSID}/xlog/wal'
PGMPGPATTERN_PGARCHIVELOG='${PGM_PGBASE_DIR}/${PGM_MAJOR_VERSION}/${PGM_PGSID}/archivelog'
PGMPGPATTERN_PGDBBASE='${PGM_PGBASE_DIR}/${PGM_MAJOR_VERSION}/${PGM_PGSID}'
#PGMPGPATTERN_PGFSLIST='"${PGM_PGBASE_DIR}/${PGM_MAJOR_VERSION}/${PGM_PGSID} ${PGM_PGBASE_DIR}/${PGM_MAJOR_VERSION}/${PGM_PGSID}/xlog ${PGM_PGBASE_DIR}/${PGM_MAJOR_VERSION}/${PGM_PGSID}/archivelog ${PGM_PGBASE_DIR}/${PGM_MAJOR_VERSION}/${PGM_PGSID}/log"'
PGMPGPATTERN_PGFSLIST=''
PGMPGPATTERN_PGRECOVER='${PGM_PGBASE_DIR}/${PGM_MAJOR_VERSION}/${PGM_PGSID}/data/recovery.conf.bak'
PGMPGPATTERN_PGCONF='${PGM_PGBASE_DIR}/${PGM_MAJOR_VERSION}/${PGM_PGSID}/data/postgresql.conf'
PGMPGPATTERN_PGHBA='${PGM_PGBASE_DIR}/${PGM_MAJOR_VERSION}/${PGM_PGSID}/data/pg_hba.conf'
PGMPGPATTERN_PGIDENT='${PGM_PGBASE_DIR}/${PGM_MAJOR_VERSION}/${PGM_PGSID}/data/pg_ident.conf'

function setInstance()
    # First set versions constants
    export PGM_PGSID=${pgm_sid}

    # Remove trailing slashes.

    # Try to determine host, port, autolaunch configuration, and running configuration
    export PGM_PGHOST=$(uname --nodename)
      export PGM_PGLISTENER="$(echo ${pgm_line} | cut --delimiter='=' --fields=2)"
      export PGM_PGPORT="$(echo ${pgm_line} | cut --delimiter='=' --fields=2)"

      export PGM_PGSTATUS="started"
        export PGM_PGREALHOST=${pgm_hostline// /}
        export PGM_PGREALPORT=${pgm_portline// /}
      export PGM_PGAUTOLAUNCH=${pgm_autolaunch,,}

function setDatabase()
    # First set versions constants
    export PGM_PGDBNAME="${pgm_database}"

# Nothing should happens after next line
export PGM_CONF="LOADED"
